#!/bin/bash

# üéØ FOCUSED ISSUE DETECTION & RESOLUTION
# Targeted testing for specific vulnerabilities discovered
# Author: AI Assistant

set -e

RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[0;33m'
BLUE='\033[0;34m'
PURPLE='\033[0;35m'
CYAN='\033[0;36m'
NC='\033[0m'

BASE_URL="http://localhost:3002"
ADMIN_EMAIL="admin@burkol.com"
ADMIN_PASSWORD="admin123"
LOG_DIR="./logs/focused"

mkdir -p "$LOG_DIR"

echo -e "${PURPLE}üéØ FOCUSED VULNERABILITY TESTING${NC}"
echo -e "${PURPLE}=================================${NC}"
echo ""

# Get admin token
get_admin_token() {
    curl -s -X POST "$BASE_URL/api/auth/login" \
        -H "Content-Type: application/json" \
        -d "{\"email\":\"$ADMIN_EMAIL\",\"password\":\"$ADMIN_PASSWORD\"}" | \
        grep -o '"token":"[^"]*"' | cut -d'"' -f4 2>/dev/null || echo ""
}

ADMIN_TOKEN=$(get_admin_token)
echo "Admin token obtained: ${ADMIN_TOKEN:0:20}..."

echo ""
echo -e "${CYAN}üö® CRITICAL ISSUE 1: Price Overflow Vulnerability${NC}"
echo "================================================"

echo "Testing extreme price calculations..."

# Test massive quantities that could cause integer overflow
response1=$(curl -s -X POST "$BASE_URL/api/calculate-price" \
    -H "Content-Type: application/json" \
    -d '{"customFields": {"qty": 999999999}}')

price1=$(echo "$response1" | grep -o '"price":[0-9]*' | cut -d':' -f2 2>/dev/null || echo "0")
echo "Extreme quantity (999,999,999): Price = $price1"

if [ "$price1" -gt 1000000000 ]; then
    echo -e "${RED}üö® CRITICAL: Price overflow vulnerability - Price: $price1${NC}"
    echo "[CRITICAL] Price overflow with qty 999999999 -> $price1" >> "$LOG_DIR/issues.log"
else
    echo -e "${GREEN}‚úÖ Price calculation within reasonable bounds${NC}"
fi

echo ""
echo -e "${CYAN}üö® CRITICAL ISSUE 2: Input Validation Bypass${NC}"  
echo "============================================="

echo "Testing invalid string quantities..."

# Test string injection in quantity
response2=$(curl -s -X POST "$BASE_URL/api/calculate-price" \
    -H "Content-Type: application/json" \
    -d '{"customFields": {"qty": "invalid_string"}}')

price2=$(echo "$response2" | grep -o '"price":[0-9]*' | cut -d':' -f2 2>/dev/null || echo "0")
echo "String quantity ('invalid_string'): Price = $price2"

if [ "$price2" -gt 0 ]; then
    echo -e "${YELLOW}‚ö†Ô∏è  WARNING: String input processed without validation - Price: $price2${NC}"
    echo "[WARNING] String qty processed -> $price2" >> "$LOG_DIR/issues.log"
else
    echo -e "${GREEN}‚úÖ String input properly handled${NC}"
fi

echo ""
echo -e "${CYAN}üö® CRITICAL ISSUE 3: Negative Values Not Blocked${NC}"
echo "==============================================="

echo "Testing negative and zero quantities..."

# Test zero quantity
response3=$(curl -s -X POST "$BASE_URL/api/calculate-price" \
    -H "Content-Type: application/json" \
    -d '{"customFields": {"qty": 0}}')

price3=$(echo "$response3" | grep -o '"price":[0-9]*' | cut -d':' -f2 2>/dev/null || echo "0")
echo "Zero quantity: Price = $price3"

if [ "$price3" -gt 0 ]; then
    echo -e "${YELLOW}‚ö†Ô∏è  WARNING: Zero quantity produces positive price - Price: $price3${NC}"
    echo "[WARNING] Zero qty produces price $price3" >> "$LOG_DIR/issues.log"
fi

echo ""
echo -e "${CYAN}üö® CRITICAL ISSUE 4: Formula Parameter Injection${NC}"
echo "=============================================="

if [ -n "$ADMIN_TOKEN" ]; then
    echo "Testing malicious formula injection..."
    
    # Try to inject dangerous code into formula
    malicious_response=$(curl -s -X PATCH "$BASE_URL/api/admin/settings/price" \
        -H "Authorization: Bearer $ADMIN_TOKEN" \
        -H "Content-Type: application/json" \
        -d '{
            "formula": "console.log(\"INJECTED\"); (base_cost + (qty * unit_cost)) * margin",
            "parameters": [
                {"id": "base_cost", "value": 300, "name": "Base", "type": "fixed"},
                {"id": "unit_cost", "value": 50, "name": "Unit", "type": "fixed"},
                {"id": "margin", "value": 1.3, "name": "Margin", "type": "fixed"},
                {"id": "qty", "type": "form", "formField": "qty", "name": "Qty"}
            ]
        }')
    
    echo "Malicious formula injection response: ${malicious_response:0:100}..."
    
    # Test if the injection worked
    test_response=$(curl -s -X POST "$BASE_URL/api/calculate-price" \
        -H "Content-Type: application/json" \
        -d '{"customFields": {"qty": 1}}')
    
    if echo "$test_response" | grep -q "INJECTED"; then
        echo -e "${RED}üö® CRITICAL: Code injection successful!${NC}"
        echo "[CRITICAL] Formula injection successful" >> "$LOG_DIR/issues.log"
    else
        echo -e "${GREEN}‚úÖ Code injection blocked${NC}"
    fi
fi

echo ""
echo -e "${CYAN}üö® CRITICAL ISSUE 5: Rate Limiting Bypass${NC}"
echo "=========================================="

echo "Testing rapid concurrent requests..."

start_time=$(date +%s)
success_count=0

# Launch 20 concurrent requests
for i in {1..20}; do
    (
        response=$(curl -s -w "%{http_code}" -X POST "$BASE_URL/api/quotes" \
            -H "Content-Type: application/json" \
            -d '{"customerInfo":{"name":"RateTest'$i'","email":"rate'$i'@test.com","phone":"1234567890"},"customFields":{"material":"Steel","thickness":5,"qty":1}}' 2>/dev/null)
        
        http_code="${response: -3}"
        if [ "$http_code" = "201" ] || [ "$http_code" = "200" ]; then
            echo "1" >> "$LOG_DIR/rate_success.tmp"
        fi
    ) &
done

# Wait for all requests
wait

end_time=$(date +%s)
duration=$((end_time - start_time))

if [ -f "$LOG_DIR/rate_success.tmp" ]; then
    success_count=$(wc -l < "$LOG_DIR/rate_success.tmp")
    rm -f "$LOG_DIR/rate_success.tmp"
fi

echo "Concurrent requests: $success_count/20 successful in ${duration}s"

if [ "$success_count" -gt 15 ]; then
    echo -e "${YELLOW}‚ö†Ô∏è  WARNING: No rate limiting - $success_count/20 requests succeeded${NC}"
    echo "[WARNING] No rate limiting detected: $success_count/20 success" >> "$LOG_DIR/issues.log"
else
    echo -e "${GREEN}‚úÖ Rate limiting appears to be working${NC}"
fi

echo ""
echo -e "${CYAN}üö® CRITICAL ISSUE 6: File Upload Security${NC}"
echo "======================================="

echo "Testing dangerous file upload..."

# Create a test file with dangerous content
echo '<!DOCTYPE html><html><body><script>alert("XSS")</script></body></html>' > /tmp/dangerous.html

# Try to upload it
upload_response=$(curl -s -w "%{http_code}" -X POST "$BASE_URL/api/upload" \
    -F "file=@/tmp/dangerous.html" 2>/dev/null || echo "404")

upload_code="${upload_response: -3}"
echo "Dangerous HTML upload response code: $upload_code"

if [ "$upload_code" = "200" ] || [ "$upload_code" = "201" ]; then
    echo -e "${RED}üö® CRITICAL: Dangerous file upload accepted!${NC}"
    echo "[CRITICAL] Dangerous HTML file upload accepted" >> "$LOG_DIR/issues.log"
elif [ "$upload_code" = "404" ]; then
    echo -e "${BLUE}‚ÑπÔ∏è  INFO: Upload endpoint not found (may be disabled)${NC}"
else
    echo -e "${GREEN}‚úÖ Dangerous file upload rejected${NC}"
fi

# Cleanup
rm -f /tmp/dangerous.html

echo ""
echo -e "${CYAN}üö® CRITICAL ISSUE 7: Authentication Bypass${NC}"
echo "========================================="

echo "Testing authentication bypass techniques..."

# Test 1: Empty token
empty_token_response=$(curl -s -w "%{http_code}" -X GET "$BASE_URL/api/admin/quotes" \
    -H "Authorization: Bearer " 2>/dev/null || echo "401")

empty_code="${empty_token_response: -3}"
echo "Empty token response: $empty_code"

# Test 2: Malformed token
malformed_response=$(curl -s -w "%{http_code}" -X GET "$BASE_URL/api/admin/quotes" \
    -H "Authorization: Bearer invalid.token.here" 2>/dev/null || echo "401")

malformed_code="${malformed_response: -3}"
echo "Malformed token response: $malformed_code"

# Test 3: No authorization header
no_auth_response=$(curl -s -w "%{http_code}" -X GET "$BASE_URL/api/admin/quotes" 2>/dev/null || echo "401")

no_auth_code="${no_auth_response: -3}"
echo "No auth header response: $no_auth_code"

bypass_count=0
if [ "$empty_code" = "200" ]; then ((bypass_count++)); fi
if [ "$malformed_code" = "200" ]; then ((bypass_count++)); fi  
if [ "$no_auth_code" = "200" ]; then ((bypass_count++)); fi

if [ "$bypass_count" -gt 0 ]; then
    echo -e "${RED}üö® CRITICAL: Authentication bypass detected ($bypass_count methods)!${NC}"
    echo "[CRITICAL] Auth bypass methods: $bypass_count" >> "$LOG_DIR/issues.log"
else
    echo -e "${GREEN}‚úÖ Authentication properly enforced${NC}"
fi

echo ""
echo -e "${PURPLE}üìä FOCUSED TESTING COMPLETE${NC}"
echo -e "${PURPLE}============================${NC}"

# Generate issue summary
if [ -f "$LOG_DIR/issues.log" ]; then
    critical_count=$(grep -c "CRITICAL" "$LOG_DIR/issues.log" 2>/dev/null || echo "0")
    warning_count=$(grep -c "WARNING" "$LOG_DIR/issues.log" 2>/dev/null || echo "0")
    
    echo ""
    echo -e "${CYAN}üìã ISSUE SUMMARY${NC}"
    echo "================"
    echo -e "${RED}üö® Critical Issues: $critical_count${NC}"
    echo -e "${YELLOW}‚ö†Ô∏è  Warnings: $warning_count${NC}"
    
    if [ -f "$LOG_DIR/issues.log" ]; then
        echo ""
        echo -e "${RED}Issues Found:${NC}"
        cat "$LOG_DIR/issues.log"
    fi
    
    echo ""
    echo -e "${BLUE}Detailed log: $LOG_DIR/issues.log${NC}"
else
    echo -e "${GREEN}‚úÖ No critical issues detected${NC}"
fi

echo "Completed: $(date)"