/**
 * Sipari≈ü Takip Sistemi Cloud Functions
 * Bu dosya Firebase Cloud Functions i√ßin hazƒ±rlanmƒ±≈ütƒ±r
 * 
 * ƒ∞ki ana otomasyonu i√ßerir:
 * 1. Stok g√ºncelleme - OrderItem "Teslim Edildi" olduƒüunda
 * 2. Sipari≈ü durumu g√ºncelleme - OrderItems durumuna g√∂re
 */

const functions = require('firebase-functions');
const admin = require('firebase-admin');

// Firebase Admin SDK'yƒ± ba≈ülat
if (admin.apps.length === 0) {
  admin.initializeApp();
}

const db = admin.firestore();

/**
 * Cloud Function: Stok G√ºncelleme
 * Tetikleyici: orderItems koleksiyonunda bir belge g√ºncellendiƒüinde
 * ƒ∞≈ülem: itemStatus "Teslim Edildi" olduƒüunda materials stok g√ºncellemesi
 */
exports.updateStockOnDelivery = functions.firestore
  .document('orderItems/{itemId}')
  .onUpdate(async (change, context) => {
    try {
      const { itemId } = context.params;
      const beforeData = change.before.data();
      const afterData = change.after.data();
      
      console.log(`üì¶ OrderItem ${itemId} g√ºncellendi`);
      
      // Status deƒüi≈üikliƒüi kontrol√º
      const statusChanged = beforeData.itemStatus !== afterData.itemStatus;
      const isDelivered = afterData.itemStatus === 'Teslim Edildi';
      const wasNotDelivered = beforeData.itemStatus !== 'Teslim Edildi';
      
      if (!statusChanged || !isDelivered || !wasNotDelivered) {
        console.log('‚è≠Ô∏è Stok g√ºncellemesi gerekmiyor');
        return null;
      }
      
      // Malzeme bilgilerini al
      const { materialCode, quantity } = afterData;
      
      if (!materialCode || !quantity || quantity <= 0) {
        console.error('‚ùå Ge√ßersiz malzeme kodu veya miktar');
        return null;
      }
      
      // Materials koleksiyonunda ilgili malzemeyi bul
      const materialsRef = db.collection('materials');
      const materialQuery = materialsRef.where('code', '==', materialCode);
      const materialSnapshot = await materialQuery.get();
      
      if (materialSnapshot.empty) {
        console.error(`‚ùå Malzeme bulunamadƒ±: ${materialCode}`);
        return null;
      }
      
      // ƒ∞lk e≈üle≈üen malzemeyi al (code unique olmalƒ±)
      const materialDoc = materialSnapshot.docs[0];
      const materialData = materialDoc.data();
      const currentStock = materialData.stock || 0;
      const newStock = currentStock + quantity;
      
      // Malzeme stokunu g√ºncelle
      await materialDoc.ref.update({
        stock: newStock,
        available: newStock - (materialData.reserved || 0),
        updatedAt: admin.firestore.FieldValue.serverTimestamp(),
        lastStockUpdate: {
          orderId: afterData.orderId,
          itemId: itemId,
          quantity: quantity,
          previousStock: currentStock,
          newStock: newStock,
          timestamp: admin.firestore.FieldValue.serverTimestamp()
        }
      });
      
      console.log(`‚úÖ Stok g√ºncellendi: ${materialCode} (${currentStock} ‚Üí ${newStock})`);
      
      // Audit log olu≈ütur
      await db.collection('auditLogs').add({
        type: 'STOCK_UPDATE',
        action: 'DELIVERY_RECEIVED',
        materialCode: materialCode,
        materialId: materialDoc.id,
        orderId: afterData.orderId,
        itemId: itemId,
        quantity: quantity,
        previousStock: currentStock,
        newStock: newStock,
        userId: 'system',
        timestamp: admin.firestore.FieldValue.serverTimestamp(),
        details: {
          materialName: materialData.name,
          supplierInfo: afterData.supplierId || 'unknown'
        }
      });
      
      return null;
      
    } catch (error) {
      console.error('‚ùå Stok g√ºncelleme hatasƒ±:', error);
      
      // Error log olu≈ütur
      await db.collection('auditLogs').add({
        type: 'ERROR',
        action: 'STOCK_UPDATE_FAILED',
        itemId: context.params.itemId,
        error: error.message,
        timestamp: admin.firestore.FieldValue.serverTimestamp()
      });
      
      throw error;
    }
  });

/**
 * Cloud Function: Sipari≈ü Durumu G√ºncelleme
 * Tetikleyici: orderItems koleksiyonunda bir belge g√ºncellendiƒüinde
 * ƒ∞≈ülem: T√ºm orderItems durumuna g√∂re ana order durumunu g√ºncelle
 */
exports.updateOrderStatusBasedOnItems = functions.firestore
  .document('orderItems/{itemId}')
  .onUpdate(async (change, context) => {
    try {
      const { itemId } = context.params;
      const beforeData = change.before.data();
      const afterData = change.after.data();
      
      console.log(`üìã OrderItem ${itemId} durum kontrol√º`);
      
      // Status deƒüi≈üikliƒüi kontrol√º
      const statusChanged = beforeData.itemStatus !== afterData.itemStatus;
      
      if (!statusChanged) {
        console.log('‚è≠Ô∏è Status deƒüi≈ümedi, sipari≈ü durumu kontrol√º gerekmiyor');
        return null;
      }
      
      const { orderId } = afterData;
      
      if (!orderId) {
        console.error('‚ùå OrderId bulunamadƒ±');
        return null;
      }
      
      // Bu sipari≈üe ait t√ºm orderItems'larƒ± al
      const orderItemsRef = db.collection('orderItems');
      const orderItemsQuery = orderItemsRef.where('orderId', '==', orderId);
      const orderItemsSnapshot = await orderItemsQuery.get();
      
      if (orderItemsSnapshot.empty) {
        console.log('‚ö†Ô∏è Bu sipari≈üe ait item bulunamadƒ±');
        return null;
      }
      
      // ƒ∞statistikleri hesapla
      let totalItems = 0;
      let deliveredItems = 0;
      let cancelledItems = 0;
      
      orderItemsSnapshot.forEach(doc => {
        const itemData = doc.data();
        totalItems++;
        
        if (itemData.itemStatus === 'Teslim Edildi') {
          deliveredItems++;
        } else if (itemData.itemStatus === 'ƒ∞ptal Edildi' || itemData.itemStatus === 'Reddedildi') {
          cancelledItems++;
        }
      });
      
      console.log(`üìä Sipari≈ü istatistikleri: ${deliveredItems}/${totalItems} teslim edildi, ${cancelledItems} iptal`);
      
      // Yeni sipari≈ü durumunu belirle
      let newOrderStatus = null;
      
      if (deliveredItems === totalItems && totalItems > 0) {
        // T√ºm items teslim edildi
        newOrderStatus = 'Tamamlandƒ±';
      } else if (deliveredItems > 0) {
        // Kƒ±smi teslimat
        newOrderStatus = 'Kƒ±smi Teslimat';
      } else if (cancelledItems === totalItems && totalItems > 0) {
        // T√ºm items iptal edildi
        newOrderStatus = 'ƒ∞ptal Edildi';
      }
      // Diƒüer durumlar: Durum deƒüi≈ümez (Onaylandƒ±, vb. kalƒ±r)
      
      if (!newOrderStatus) {
        console.log('‚è≠Ô∏è Sipari≈ü durumu deƒüi≈üikliƒüi gerekmiyor');
        return null;
      }
      
      // Ana sipari≈üi g√ºncelle
      const orderRef = db.collection('orders').doc(orderId);
      const orderDoc = await orderRef.get();
      
      if (!orderDoc.exists) {
        console.error(`‚ùå Sipari≈ü bulunamadƒ±: ${orderId}`);
        return null;
      }
      
      const currentOrderData = orderDoc.data();
      const currentStatus = currentOrderData.orderStatus;
      
      if (currentStatus === newOrderStatus) {
        console.log(`‚è≠Ô∏è Sipari≈ü durumu zaten ${newOrderStatus}`);
        return null;
      }
      
      // Sipari≈ü durumunu g√ºncelle
      await orderRef.update({
        orderStatus: newOrderStatus,
        updatedAt: admin.firestore.FieldValue.serverTimestamp(),
        statusHistory: admin.firestore.FieldValue.arrayUnion({
          from: currentStatus,
          to: newOrderStatus,
          timestamp: admin.firestore.FieldValue.serverTimestamp(),
          triggeredBy: 'system',
          reason: 'order_items_status_change',
          itemStats: {
            total: totalItems,
            delivered: deliveredItems,
            cancelled: cancelledItems
          }
        })
      });
      
      console.log(`‚úÖ Sipari≈ü durumu g√ºncellendi: ${orderId} (${currentStatus} ‚Üí ${newOrderStatus})`);
      
      // Audit log olu≈ütur
      await db.collection('auditLogs').add({
        type: 'ORDER_STATUS_UPDATE',
        action: 'AUTO_STATUS_CHANGE',
        orderId: orderId,
        previousStatus: currentStatus,
        newStatus: newOrderStatus,
        triggeredBy: 'system',
        reason: 'order_items_status_change',
        itemStats: {
          total: totalItems,
          delivered: deliveredItems,
          cancelled: cancelledItems
        },
        timestamp: admin.firestore.FieldValue.serverTimestamp()
      });
      
      return null;
      
    } catch (error) {
      console.error('‚ùå Sipari≈ü durumu g√ºncelleme hatasƒ±:', error);
      
      // Error log olu≈ütur
      await db.collection('auditLogs').add({
        type: 'ERROR',
        action: 'ORDER_STATUS_UPDATE_FAILED',
        itemId: context.params.itemId,
        error: error.message,
        timestamp: admin.firestore.FieldValue.serverTimestamp()
      });
      
      throw error;
    }
  });

/**
 * Cloud Function: Sipari≈ü Olu≈üturulduƒüunda
 * Tetikleyici: orders koleksiyonuna yeni belge eklendiƒüinde
 * ƒ∞≈ülem: Ba≈ülangƒ±√ß durumu ve audit log olu≈ütur
 */
exports.onOrderCreated = functions.firestore
  .document('orders/{orderId}')
  .onCreate(async (snapshot, context) => {
    try {
      const { orderId } = context.params;
      const orderData = snapshot.data();
      
      console.log(`üìù Yeni sipari≈ü olu≈üturuldu: ${orderId}`);
      
      // Audit log olu≈ütur
      await db.collection('auditLogs').add({
        type: 'ORDER_CREATED',
        action: 'ORDER_NEW',
        orderId: orderId,
        supplierId: orderData.supplierId,
        supplierName: orderData.supplierName,
        totalAmount: orderData.totalAmount,
        orderStatus: orderData.orderStatus,
        createdBy: orderData.createdBy || 'unknown',
        timestamp: admin.firestore.FieldValue.serverTimestamp(),
        details: {
          notes: orderData.notes || '',
          expectedDeliveryDate: orderData.expectedDeliveryDate || null
        }
      });
      
      return null;
      
    } catch (error) {
      console.error('‚ùå Sipari≈ü olu≈üturma log hatasƒ±:', error);
      return null; // Bu hata kritik deƒüil, sipari≈ü olu≈üturmayƒ± engellemez
    }
  });

/**
 * Cloud Function: OrderItem Olu≈üturulduƒüunda
 * Tetikleyici: orderItems koleksiyonuna yeni belge eklendiƒüinde
 * ƒ∞≈ülem: Audit log olu≈ütur
 */
exports.onOrderItemCreated = functions.firestore
  .document('orderItems/{itemId}')
  .onCreate(async (snapshot, context) => {
    try {
      const { itemId } = context.params;
      const itemData = snapshot.data();
      
      console.log(`üì¶ Yeni sipari≈ü kalemi olu≈üturuldu: ${itemId}`);
      
      // Audit log olu≈ütur
      await db.collection('auditLogs').add({
        type: 'ORDER_ITEM_CREATED',
        action: 'ORDER_ITEM_NEW',
        itemId: itemId,
        orderId: itemData.orderId,
        materialCode: itemData.materialCode,
        materialName: itemData.materialName,
        quantity: itemData.quantity,
        unitPrice: itemData.unitPrice,
        itemStatus: itemData.itemStatus,
        timestamp: admin.firestore.FieldValue.serverTimestamp()
      });
      
      return null;
      
    } catch (error) {
      console.error('‚ùå OrderItem olu≈üturma log hatasƒ±:', error);
      return null; // Bu hata kritik deƒüil
    }
  });

/**
 * Scheduled Function: G√ºnl√ºk Sipari≈ü Raporu
 * Tetikleyici: Her g√ºn saat 09:00'da
 * ƒ∞≈ülem: G√ºnl√ºk sipari≈ü istatistiklerini hesapla ve kaydet
 */
exports.dailyOrderReport = functions.pubsub
  .schedule('0 9 * * *') // Her g√ºn 09:00
  .timeZone('Europe/Istanbul')
  .onRun(async (context) => {
    try {
      console.log('üìä G√ºnl√ºk sipari≈ü raporu olu≈üturuluyor...');
      
      const today = new Date();
      today.setHours(0, 0, 0, 0);
      
      const tomorrow = new Date(today);
      tomorrow.setDate(tomorrow.getDate() + 1);
      
      // Bug√ºn olu≈üturulan sipari≈üler
      const ordersRef = db.collection('orders');
      const todayOrdersQuery = ordersRef
        .where('orderDate', '>=', today)
        .where('orderDate', '<', tomorrow);
      
      const todayOrdersSnapshot = await todayOrdersQuery.get();
      
      // ƒ∞statistikleri hesapla
      let stats = {
        date: today,
        totalOrders: todayOrdersSnapshot.size,
        totalAmount: 0,
        statusBreakdown: {
          'Taslak': 0,
          'Onay Bekliyor': 0,
          'Onaylandƒ±': 0,
          'Kƒ±smi Teslimat': 0,
          'Tamamlandƒ±': 0,
          'ƒ∞ptal Edildi': 0
        },
        topSuppliers: {}
      };
      
      todayOrdersSnapshot.forEach(doc => {
        const orderData = doc.data();
        stats.totalAmount += orderData.totalAmount || 0;
        
        // Status breakdown
        const status = orderData.orderStatus || 'Taslak';
        if (stats.statusBreakdown[status] !== undefined) {
          stats.statusBreakdown[status]++;
        }
        
        // Top suppliers
        const supplierId = orderData.supplierId;
        if (supplierId) {
          if (!stats.topSuppliers[supplierId]) {
            stats.topSuppliers[supplierId] = {
              name: orderData.supplierName,
              orderCount: 0,
              totalAmount: 0
            };
          }
          stats.topSuppliers[supplierId].orderCount++;
          stats.topSuppliers[supplierId].totalAmount += orderData.totalAmount || 0;
        }
      });
      
      // Raporu kaydet
      await db.collection('dailyReports').add({
        type: 'ORDERS',
        date: today,
        stats: stats,
        generatedAt: admin.firestore.FieldValue.serverTimestamp()
      });
      
      console.log(`‚úÖ G√ºnl√ºk sipari≈ü raporu olu≈üturuldu: ${stats.totalOrders} sipari≈ü`);
      
      return null;
      
    } catch (error) {
      console.error('‚ùå G√ºnl√ºk rapor hatasƒ±:', error);
      return null;
    }
  });

/**
 * HTTPS Function: Manuel Sipari≈ü Durumu G√ºncelleme
 * Kullanƒ±m: Manuel olarak bir sipari≈üin durumunu g√ºncellemek i√ßin
 */
exports.updateOrderStatus = functions.https.onCall(async (data, context) => {
  try {
    // Auth kontrol√º
    if (!context.auth) {
      throw new functions.https.HttpsError('unauthenticated', 'Kimlik doƒürulama gerekli');
    }
    
    const { orderId, newStatus, reason } = data;
    
    if (!orderId || !newStatus) {
      throw new functions.https.HttpsError('invalid-argument', 'OrderId ve newStatus gerekli');
    }
    
    console.log(`üìã Manuel sipari≈ü durumu g√ºncelleme: ${orderId} ‚Üí ${newStatus}`);
    
    // Sipari≈ü kontrol√º
    const orderRef = db.collection('orders').doc(orderId);
    const orderDoc = await orderRef.get();
    
    if (!orderDoc.exists) {
      throw new functions.https.HttpsError('not-found', 'Sipari≈ü bulunamadƒ±');
    }
    
    const currentData = orderDoc.data();
    const currentStatus = currentData.orderStatus;
    
    // Sipari≈ü durumunu g√ºncelle
    await orderRef.update({
      orderStatus: newStatus,
      updatedAt: admin.firestore.FieldValue.serverTimestamp(),
      statusHistory: admin.firestore.FieldValue.arrayUnion({
        from: currentStatus,
        to: newStatus,
        timestamp: admin.firestore.FieldValue.serverTimestamp(),
        triggeredBy: context.auth.uid,
        reason: reason || 'manual_update'
      })
    });
    
    // Audit log
    await db.collection('auditLogs').add({
      type: 'ORDER_STATUS_UPDATE',
      action: 'MANUAL_STATUS_CHANGE',
      orderId: orderId,
      previousStatus: currentStatus,
      newStatus: newStatus,
      triggeredBy: context.auth.uid,
      reason: reason || 'manual_update',
      timestamp: admin.firestore.FieldValue.serverTimestamp()
    });
    
    console.log(`‚úÖ Manuel sipari≈ü durumu g√ºncellendi: ${orderId} (${currentStatus} ‚Üí ${newStatus})`);
    
    return {
      success: true,
      message: 'Sipari≈ü durumu ba≈üarƒ±yla g√ºncellendi',
      orderId: orderId,
      previousStatus: currentStatus,
      newStatus: newStatus
    };
    
  } catch (error) {
    console.error('‚ùå Manuel sipari≈ü durumu g√ºncelleme hatasƒ±:', error);
    
    if (error instanceof functions.https.HttpsError) {
      throw error;
    }
    
    throw new functions.https.HttpsError('internal', 'Sipari≈ü durumu g√ºncellenemedi');
  }
});