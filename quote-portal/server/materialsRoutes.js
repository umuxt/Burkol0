// Materials API Routes - Firebase Admin SDK kullanarak
import admin from 'firebase-admin'
import { requireAuth } from './auth.js'

const db = admin.firestore()

// Materials collection reference
const materialsCollection = db.collection('materials')
const categoriesCollection = db.collection('materials-categories')

// Helper function to generate next material code
async function generateNextMaterialCode() {
  try {
    const snapshot = await materialsCollection.get()
    const existingCodes = []
    
    snapshot.forEach(doc => {
      const data = doc.data()
      if (data.code && data.code.startsWith('M-')) {
        const number = parseInt(data.code.split('-')[1])
        if (!isNaN(number)) {
          existingCodes.push(number)
        }
      }
    })
    
    // En b√ºy√ºk sayƒ±yƒ± bul ve 1 ekle
    const maxNumber = existingCodes.length > 0 ? Math.max(...existingCodes) : 0
    const nextNumber = maxNumber + 1
    
    // M-001 formatƒ±nda d√∂nd√ºr
    return `M-${String(nextNumber).padStart(3, '0')}`
  } catch (error) {
    console.error('‚ùå Material code olu≈üturulurken hata:', error)
    return `M-${String(Date.now()).slice(-3)}` // Fallback
  }
}

export function setupMaterialsRoutes(app) {
  
  // GET /api/materials - T√ºm malzemeleri listele (kaldƒ±rƒ±lanlar hari√ß)
  app.get('/api/materials', requireAuth, async (req, res) => {
    try {
      console.log('üì¶ API: Materials listesi istendi')
      
      // Kaldƒ±rƒ±lan malzemeleri hari√ß tut - Firebase query ile filtrele
      const snapshot = await materialsCollection
        .where('status', '!=', 'Kaldƒ±rƒ±ldƒ±')
        .get()
      
      const materials = []
      snapshot.forEach(doc => {
        materials.push({
          id: doc.id,
          ...doc.data()
        })
      })
      
      console.log(`‚úÖ API: ${materials.length} malzeme d√∂nd√ºr√ºld√º (kaldƒ±rƒ±lanlar hari√ß)`)
      res.json(materials)
    } catch (error) {
      console.error('‚ùå API: Materials listesi alƒ±nƒ±rken hata:', error)
      res.status(500).json({ error: 'Materials listesi alƒ±namadƒ±' })
    }
  })

  // GET /api/materials/all - T√ºm malzemeleri listele (kaldƒ±rƒ±lanlar dahil)
  app.get('/api/materials/all', requireAuth, async (req, res) => {
    try {
      console.log('üì¶ API: T√ºm materials listesi istendi (kaldƒ±rƒ±lanlar dahil)')
      const snapshot = await materialsCollection.get()
      
      const materials = []
      snapshot.forEach(doc => {
        materials.push({
          id: doc.id,
          ...doc.data()
        })
      })
      
      console.log(`‚úÖ API: ${materials.length} malzeme d√∂nd√ºr√ºld√º (t√ºm√º)`)
      res.json(materials)
    } catch (error) {
      console.error('‚ùå API: T√ºm materials listesi alƒ±nƒ±rken hata:', error)
      res.status(500).json({ error: 'T√ºm materials listesi alƒ±namadƒ±' })
    }
  })

  // POST /api/materials - Yeni malzeme ekle
  app.post('/api/materials', requireAuth, async (req, res) => {
    try {
      console.log('üì¶ API: Yeni malzeme ekleniyor:', req.body)
      
      const materialData = {
        ...req.body,
        status: req.body.status || 'Aktif', // Varsayƒ±lan status 'Aktif'
        createdAt: admin.firestore.FieldValue.serverTimestamp(),
        updatedAt: admin.firestore.FieldValue.serverTimestamp()
      }
      
      // Custom ID kullan - eƒüer code varsa onu ID olarak kullan
      const customId = materialData.code || await generateNextMaterialCode()
      
      // Eƒüer code yok ise otomatik olu≈ütur ve data'ya ekle
      if (!materialData.code) {
        materialData.code = customId
      }
      
      console.log('üì¶ API: Custom ID kullanƒ±lƒ±yor:', customId)
      
      // Custom ID ile document olu≈ütur
      const docRef = materialsCollection.doc(customId)
      await docRef.set(materialData)
      
      const newDoc = await docRef.get()
      const newMaterial = {
        id: newDoc.id,
        ...newDoc.data()
      }
      
      console.log('‚úÖ API: Malzeme eklendi:', newMaterial.id)
      res.status(201).json(newMaterial)
    } catch (error) {
      console.error('‚ùå API: Malzeme eklenirken hata:', error)
      res.status(500).json({ error: 'Malzeme eklenemedi' })
    }
  })

  // PATCH /api/materials/:id - Malzeme g√ºncelle
  app.patch('/api/materials/:id', requireAuth, async (req, res) => {
    try {
      const { id } = req.params
      console.log('üì¶ API: Malzeme g√ºncelleniyor:', id, req.body)
      
      const updateData = {
        ...req.body,
        updatedAt: admin.firestore.FieldValue.serverTimestamp()
      }
      
      const docRef = materialsCollection.doc(id)
      await docRef.update(updateData)
      
      const updatedDoc = await docRef.get()
      if (!updatedDoc.exists) {
        return res.status(404).json({ error: 'Malzeme bulunamadƒ±' })
      }
      
      const updatedMaterial = {
        id: updatedDoc.id,
        ...updatedDoc.data()
      }
      
      console.log('‚úÖ API: Malzeme g√ºncellendi:', id)
      res.json(updatedMaterial)
    } catch (error) {
      console.error('‚ùå API: Malzeme g√ºncellenirken hata:', error)
      res.status(500).json({ error: 'Malzeme g√ºncellenemedi' })
    }
  })

  // DELETE /api/materials/:id - Malzeme sil (Soft Delete)
  app.delete('/api/materials/:id', requireAuth, async (req, res) => {
    try {
      const { id } = req.params
      console.log('üì¶ API: Malzeme soft delete yapƒ±lƒ±yor:', id)
      
      const docRef = materialsCollection.doc(id)
      const doc = await docRef.get()
      
      if (!doc.exists) {
        return res.status(404).json({ error: 'Malzeme bulunamadƒ±' })
      }
      
      const materialData = doc.data()
      
      // Zaten kaldƒ±rƒ±lmƒ±≈ü malzemeyi tekrar kaldƒ±rmaya √ßalƒ±≈üƒ±lƒ±yorsa
      if (materialData.status === 'Kaldƒ±rƒ±ldƒ±') {
        console.log('‚ö†Ô∏è API: Malzeme zaten kaldƒ±rƒ±lmƒ±≈ü, i≈ülem atlanƒ±yor:', id)
        return res.json({ success: true, id, action: 'already_removed', message: 'Malzeme zaten kaldƒ±rƒ±lmƒ±≈ü' })
      }
      
      // Hard delete yerine soft delete - status'u 'Kaldƒ±rƒ±ldƒ±' yap
      await docRef.update({
        status: 'Kaldƒ±rƒ±ldƒ±',
        removedAt: admin.firestore.FieldValue.serverTimestamp(),
        updatedAt: admin.firestore.FieldValue.serverTimestamp()
      })
      
      console.log('‚úÖ API: Malzeme soft delete edildi:', id)
      res.json({ success: true, id, action: 'soft_delete' })
    } catch (error) {
      console.error('‚ùå API: Malzeme soft delete edilirken hata:', error)
      res.status(500).json({ error: 'Malzeme silinemedi' })
    }
  })

  // DELETE /api/materials/:id/permanent - Malzeme kalƒ±cƒ± sil (Hard Delete - Admin Only)
  app.delete('/api/materials/:id/permanent', requireAuth, async (req, res) => {
    try {
      const { id } = req.params
      console.log('üì¶ API: Malzeme kalƒ±cƒ± siliniyor (HARD DELETE):', id)
      
      const docRef = materialsCollection.doc(id)
      const doc = await docRef.get()
      
      if (!doc.exists) {
        return res.status(404).json({ error: 'Malzeme bulunamadƒ±' })
      }
      
      // Hard delete - ger√ßekten sil
      await docRef.delete()
      
      console.log('‚úÖ API: Malzeme kalƒ±cƒ± silindi (HARD DELETE):', id)
      res.json({ success: true, id, action: 'hard_delete' })
    } catch (error) {
      console.error('‚ùå API: Malzeme kalƒ±cƒ± silinirken hata:', error)
      res.status(500).json({ error: 'Malzeme kalƒ±cƒ± silinemedi' })
    }
  })

  // GET /api/categories - T√ºm kategorileri listele
  app.get('/api/categories', requireAuth, async (req, res) => {
    try {
      console.log('üè∑Ô∏è API: Kategoriler listesi istendi')
      const snapshot = await categoriesCollection.get()
      
      const categories = []
      snapshot.forEach(doc => {
        categories.push({
          id: doc.id,
          ...doc.data()
        })
      })
      
      console.log(`‚úÖ API: ${categories.length} kategori d√∂nd√ºr√ºld√º`)
      res.json(categories)
    } catch (error) {
      console.error('‚ùå API: Kategoriler listesi alƒ±nƒ±rken hata:', error)
      res.status(500).json({ error: 'Kategoriler listesi alƒ±namadƒ±' })
    }
  })

  // POST /api/categories - Yeni kategori ekle
  app.post('/api/categories', requireAuth, async (req, res) => {
    try {
      console.log('üè∑Ô∏è API: Yeni kategori ekleniyor:', req.body)
      
      const categoryData = {
        ...req.body,
        createdAt: admin.firestore.FieldValue.serverTimestamp(),
        updatedAt: admin.firestore.FieldValue.serverTimestamp()
      }
      
      const docRef = await categoriesCollection.add(categoryData)
      const newDoc = await docRef.get()
      
      const newCategory = {
        id: newDoc.id,
        ...newDoc.data()
      }
      
      console.log('‚úÖ API: Kategori eklendi:', newCategory.id)
      res.status(201).json(newCategory)
    } catch (error) {
      console.error('‚ùå API: Kategori eklenirken hata:', error)
      res.status(500).json({ error: 'Kategori eklenemedi' })
    }
  })

  // PATCH /api/categories/:id - Kategori g√ºncelle
  app.patch('/api/categories/:id', requireAuth, async (req, res) => {
    try {
      const { id } = req.params
      console.log('üè∑Ô∏è API: Kategori g√ºncelleniyor:', id, req.body)
      
      const updateData = {
        ...req.body,
        updatedAt: admin.firestore.FieldValue.serverTimestamp()
      }
      
      const docRef = categoriesCollection.doc(id)
      await docRef.update(updateData)
      
      const updatedDoc = await docRef.get()
      if (!updatedDoc.exists) {
        return res.status(404).json({ error: 'Kategori bulunamadƒ±' })
      }
      
      const updatedCategory = {
        id: updatedDoc.id,
        ...updatedDoc.data()
      }
      
      console.log('‚úÖ API: Kategori g√ºncellendi:', id)
      res.json(updatedCategory)
    } catch (error) {
      console.error('‚ùå API: Kategori g√ºncellenirken hata:', error)
      res.status(500).json({ error: 'Kategori g√ºncellenemedi' })
    }
  })

  // DELETE /api/categories/:id - Kategori sil
  app.delete('/api/categories/:id', requireAuth, async (req, res) => {
    try {
      const { id } = req.params
      console.log('üè∑Ô∏è API: Kategori siliniyor:', id)
      
      const docRef = categoriesCollection.doc(id)
      const doc = await docRef.get()
      
      if (!doc.exists) {
        return res.status(404).json({ error: 'Kategori bulunamadƒ±' })
      }
      
      await docRef.delete()
      
      console.log('‚úÖ API: Kategori silindi:', id)
      res.json({ success: true, id })
    } catch (error) {
      console.error('‚ùå API: Kategori silinirken hata:', error)
      res.status(500).json({ error: 'Kategori silinemedi' })
    }
  })

  console.log('‚úÖ Materials API routes kuruldu')
}